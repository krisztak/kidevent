version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: kidevent_prod
      POSTGRES_USER: ${DB_USER:-kidevent_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-kidevent_user} -d kidevent_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session storage
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - internal
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-kidevent_user}:${DB_PASSWORD}@postgres:5432/kidevent_prod
      - PORT=5000
      - SESSION_SECRET=${SESSION_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
      - REPL_ID=${REPL_ID}
      - ISSUER_URL=${ISSUER_URL}
      - REPLIT_DOMAINS=${REPLIT_DOMAINS}
    ports:
      - "5000:5000"
    networks:
      - internal
      - external
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - external
    depends_on:
      - app

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  internal:
    driver: bridge
  external:
    driver: bridge